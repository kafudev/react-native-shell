apply plugin: "com.android.application"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.didi.dokit'
apply from: '../../node_modules/react-native-unimodules/gradle.groovy'


import com.android.build.OutputFile
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

// 2nd line, add a new apply:
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

//getTimeZone(id)这个id可以是GMT+8：北京时间
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("Asia/BeiJing"))
}

// 自增版本号
def increasedVersionCode() {

    // 通过时间戳打包
    def ttime = new Date().getTime();
    def versionCode = "$ttime".substring(2,8)
    println "APP_NAME:" + project.env.get("APP_NAME")
    println "applicationId:" + project.env.get("APP_PACKAGE")
    println "versionCode:" + versionCode
    println "versionName:" + project.env.get("versionName")
    println "timestamp:" + ttime
    return versionCode.toInteger()

    // // 通过版本文件控制打包
    // def propFile = file('../code.properties')
    // def Properties props = new Properties()
    // props.load(new FileInputStream(propFile))
    // // 读取gradle.properties文件中定义的VERSION_CODE属性
    // def code = props['VERSION_CODE']
    // if (!code){
    //     code = 100
    // }
    // code = code.toInteger()
    // def isRelease = true
    // if (isRelease) {
    //     code++
    //     props['VERSION_CODE'] = code.toString()
    //     // 将最新的versionCode写入gradle.properties文件中
    //     props.store(propFile.newWriter(), null)
    // }
    // return code
}

// // 读取package.json的包版本
// String versionName
// def jsonFile = file('../../package.json')
// def json = new JsonSlurper().parseText(jsonFile.text)
// versionName = json.dependencies["version"]

// 设置APPCENTER配置文件
def setAppcenterConfig() {
    def APPCENTER_KEY_ANDROID = project.env.get("APPCENTER_KEY_ANDROID")
    if(APPCENTER_KEY_ANDROID){
      def con = {
          app_secret APPCENTER_KEY_ANDROID
      }
      def jsonStr = JsonOutput.toJson(con)
      def conPath = './src/main/assets/appcenter-config.json'
      new File(project.projectDir, conPath).withWriter('utf-8') { writer ->
          writer.write jsonStr
      }
    }
}
setAppcenterConfig()

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        resValue "string", "app_name", project.env.get("APP_NAME")
        resValue "string", "build_config_package", project.env.get("APP_PACKAGE")   // react-native-config配置用
        resValue "string", "CodePushDeploymentKey", project.env.get("CODEPUSH_KEY_ANDROID")
        applicationId project.env.get("APP_PACKAGE")
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode increasedVersionCode()
        versionName project.env.get("versionName")

        manifestPlaceholders = [
            APP_NAME: project.env.get("APP_NAME"),
            APP_PACKAGE: project.env.get("APP_PACKAGE"),

            JPUSH_PKGNAME : applicationId,
            JPUSH_APPKEY: project.env.get("JPUSH_APPKEY"),
            JPUSH_CHANNEL: project.env.get("JPUSH_CHANNEL"),

            // 开发工具
            DOKIT_APPID: project.env.get("DOKIT_APPID"),
            BUGLY_APPID: project.env.get("BUGLY_APPID"),

            // 七鱼客服
            QIYU_APPKEY: project.env.get("QIYU_APPKEY"),

            // 腾讯直播
            TXLIVE_LICENCE_KEY: project.env.get("TXLIVE_LICENCE_KEY"),
            TXLIVE_LICENCE_URL: project.env.get("TXLIVE_LICENCE_URL"),

            //xiaomi_config_start
            XIAOMI_APPID  : project.env.get("XIAOMI_APPID"),
            XIAOMI_APPKEY : project.env.get("XIAOMI_APPKEY"),
            //xiaomi_config_end
            //oppo_config_start
            OPPO_APPKEY   : project.env.get("OPPO_APPKEY"),
            OPPO_APPID    : project.env.get("OPPO_APPID"),
            OPPO_APPSECRET: project.env.get("OPPO_APPSECRET"),
            //oppo_config_end
            //vivo_config_start
            VIVO_APPKEY   : project.env.get("VIVO_APPKEY"),
            VIVO_APPID    : project.env.get("VIVO_APPID"),
            //vivo_config_end

            UMENG_APPKEY: project.env.get("UMENG_APPKEY"),
            QQ_APPID: project.env.get("QQ_APPID"),
            QQ_APPKEY: project.env.get("QQ_APPKEY"),
            WECHAT_APPID: project.env.get("WECHAT_APPID"),
            WECHAT_APPKEY: project.env.get("WECHAT_APPKEY"),
            WEIBO_APPID: project.env.get("WEIBO_APPID"),
            WEIBO_APPKEY: project.env.get("WEIBO_APPKEY"),
        ]

        vectorDrawables.useSupportLibrary  true
        multiDexEnabled true
        missingDimensionStrategy 'react-native-camera', 'general'

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a' //, 'x86',  'x86_64',
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file("$rootDir/"+project.env.get("debug_storeFile"))
            storePassword project.env.get("debug_storePassword")
            keyAlias project.env.get("debug_keyAlias")
            keyPassword project.env.get("debug_keyPassword")
        }
        release {
            storeFile file("$rootDir/"+project.env.get("release_storeFile"))
            storePassword project.env.get("release_storePassword")
            keyAlias project.env.get("release_keyAlias")
            keyPassword project.env.get("release_keyPassword")
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // 资源文件合并
    sourceSets {
        main {
            // 指定资源，原来的资源也需要指定
            java {
                srcDirs ["$rootDir/"+ project.env.get("sourceBasePath") +"/android/src/main/java",'src/main/java']
            }
            assets {
                srcDirs ["$rootDir/"+ project.env.get("sourceBasePath") +"/android/src/main/assets",'src/main/assets']
            }
            res {
                srcDirs ["$rootDir/"+ project.env.get("sourceBasePath") +"/android/src/main/res",'src/main/res']
            }
        }
    }

    dexOptions{
        javaMaxHeapSize "2048m"
        // 忽略方法数限制的检查
        jumboMode true
        // 是否对依赖的库进行dex 预处理来使你的增量构建更快速，
        // 因为这个特性可能会使你的clean 构建变慢，
        // 因此在你的持续集成服务器上你可能想关闭这个特性
        preDexLibraries true
        //设置最大的线程数量使用当运行 dex-in-process时,默认值是4，如果不确定，还是用默认值吧
        maxProcessCount 8
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        // variant.outputs.each { output ->
        //     // For each separate APK per architecture, set a unique version code as described here:
        //     // https://developer.android.com/studio/build/configure-apk-splits.html
        //     // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
        //     def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
        //     def abi = output.getFilter(OutputFile.ABI)
        //     if (abi != null) {  // null for the universal-debug, universal-release variants
        //         output.versionCodeOverride =
        //                 defaultConfig.versionCode * 1000 + versionCodes.get(abi)
        //     }

        // }

        //确定输出文件名
        def today = new Date()
        def path = ((project.name != "app") ? project.name : rootProject.name.replace(" ","")) + "_" +
                variant.flavorName + "_" +
                variant.buildType.name + "_"+
                variant.versionName + "_" +
                today.format('yyyyMMddhhmm') +
                ".apk"
        // 输出文件
        variant.outputs.each { output ->
            def outputFileDir = "${project.projectDir.absolutePath}/../../build/android/${variant.buildType.name}/${variant.flavorName}/${variant.versionName}"
            variant.packageApplicationProvider.get().outputDirectory = new File(outputFileDir)
            output.outputFileName = path
        }
    }

    repositories {
        flatDir {
            dirs "$rootDir/../node_modules/@0x5e/react-native-alipay/android/libs"
        }
    }
}

dokitExt {
    //通用设置
    comm {
        //地图经纬度开关
        gpsSwitch true
        //网络开关
        networkSwitch true
        //大图开关
        bigImgSwitch true
        //webView js 抓包
        webViewSwitch true
    }

    slowMethod {
        //调用栈模式配置
        stackMethod {
            //默认值为 5ms 小于该值的函数在调用栈中不显示
            thresholdTime 10
            //调用栈函数入口
            enterMethods = ["com.didichuxing.doraemondemo.MainDebugActivity.test1"]
            //黑名单 粒度最小到类 暂不支持到方法
            methodBlacklist = ["com.facebook.drawee.backends.pipeline.Fresco"]
        }
        //普通模式配置
        normalMethod {
            //默认值为 500ms 小于该值的函数在运行时不会在控制台中被打印
            thresholdTime 500
            //需要针对函数插装的包名
            packageNames = ["com.didichuxing.doraemondemo"]
            //不需要针对函数插装的包名&类名
            methodBlacklist = ["com.didichuxing.doraemondemo.dokit"]
        }
    }
}

dependencies {
    implementation project(':jcore-react-native')
    implementation project(':jpush-react-native')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    addUnimodulesDependencies()

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    //oppo_dependencies_start
    // oppo 厂商 aar 需要单独引入
    implementation files('./libs/com.heytap.msp-push-2.1.0.aar')
    //oppo_dependencies_end

    debugImplementation 'com.didichuxing.doraemonkit:dokitx:3.3.5'
    releaseImplementation 'com.didichuxing.doraemonkit:dokitx-no-op:3.3.5'

    implementation 'com.tencent.bugly:crashreport:latest.release'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'

    implementation 'com.qiyukf.unicorn:unicorn:5.14.1'

    implementation 'com.squareup.okhttp3:okhttp:3.12.1'

    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    implementation 'com.google.android.material:material:1.0.0'

    implementation "com.tencent.liteav:LiteAVSDK_Professional:8.5.10028"
}

//huawei_plugin_start
//华为请按照厂商文档配置根 gradle 华为镜像依赖和添加 agconnect-services.json 后再打开此插件依赖
// apply plugin: 'com.huawei.agconnect'
//huawei_plugin_end

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
